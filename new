import pygame
import random
import math

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Pong")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)

# Game variables
BALL_RADIUS = 10
PADDLE_WIDTH, PADDLE_HEIGHT = 10, 100
BALL_SPEED = 5
PADDLE_SPEED = 7

# Initial positions
ball_x, ball_y = WIDTH // 2, HEIGHT // 2
ball_dx, ball_dy = BALL_SPEED * random.choice([-1, 1]), BALL_SPEED * random.choice([-1, 1])
left_paddle_y = (HEIGHT - PADDLE_HEIGHT) // 2
right_paddle_y = (HEIGHT - PADDLE_HEIGHT) // 2

# Gravity variables
g_angle = 0  # Angle of gravity
G_FORCE = 0.2  # Strength of gravity
g_center_crossed = False  # To track if gravity has already changed post-center-cross

# Score variables
left_score, right_score = 0, 0

# Star field
stars = [(random.randint(0, WIDTH), random.randint(0, HEIGHT)) for _ in range(100)]

# Game mode
ai_mode = False

# Timer for solar flare
game_start_time = pygame.time.get_ticks()
SOLAR_FLARE_TIME = 10000  # Solar flare occurs every 10 seconds
solar_flare_triggered = False
flare_message_time = 0
FLARE_MESSAGE_DURATION = 1000

# Load rocket image
rocket_image = pygame.image.load("rocket.png")
rocket_image = pygame.transform.scale(rocket_image, (30, 30))

def draw_objects():
    screen.fill(BLACK)
    # Draw stars
    for star in stars:
        pygame.draw.circle(screen, YELLOW, star, 2)
    # Draw rocket
    rotated_rocket = pygame.transform.rotate(rocket_image, -g_angle)
    rocket_rect = rotated_rocket.get_rect(center=(ball_x, ball_y))
    screen.blit(rotated_rocket, rocket_rect)
    # Paddles
    pygame.draw.rect(screen, WHITE, (10, left_paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT))
    pygame.draw.rect(screen, WHITE, (WIDTH - 20, right_paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT))
    # Scores
    font = pygame.font.Font(None, 74)
    left_text = font.render(str(left_score), True, WHITE)
    right_text = font.render(str(right_score), True, WHITE)
    screen.blit(left_text, (WIDTH // 4, 20))
    screen.blit(right_text, (WIDTH * 3 // 4, 20))
    # Solar flare warning
    if solar_flare_triggered and pygame.time.get_ticks() - flare_message_time < FLARE_MESSAGE_DURATION:
        flare_text = font.render("SOLAR FLARE APPROACHING!", True, YELLOW)
        screen.blit(flare_text, (WIDTH // 2 - flare_text.get_width() // 2, HEIGHT // 2 - flare_text.get_height() // 2))
    pygame.display.flip()

# Menu for game mode selection
menu_running = True
while menu_running:
    screen.fill(BLACK)
    font = pygame.font.Font(None, 74)
    title_text = font.render("Space Pong", True, WHITE)
    screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, HEIGHT // 4))
    mode_text_1 = font.render("1. Play vs Player", True, WHITE)
    mode_text_2 = font.render("2. Play vs AI", True, WHITE)
    screen.blit(mode_text_1, (WIDTH // 2 - mode_text_1.get_width() // 2, HEIGHT // 2 - 50))
    screen.blit(mode_text_2, (WIDTH // 2 - mode_text_2.get_width() // 2, HEIGHT // 2 + 50))
    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1:
                ai_mode = False
                menu_running = False
            elif event.key == pygame.K_2:
                ai_mode = True
                menu_running = False

# Game loop
running = True
clock = pygame.time.Clock()

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Movement keys
    keys = pygame.key.get_pressed()
    if keys[pygame.K_w] and left_paddle_y > 0:
        left_paddle_y -= PADDLE_SPEED
    if keys[pygame.K_s] and left_paddle_y < HEIGHT - PADDLE_HEIGHT:
        left_paddle_y += PADDLE_SPEED

    if ai_mode:
        # Simple AI for right paddle
        if ball_y < right_paddle_y + PADDLE_HEIGHT // 2 and right_paddle_y > 0:
            right_paddle_y -= PADDLE_SPEED
        if ball_y > right_paddle_y + PADDLE_HEIGHT // 2 and right_paddle_y < HEIGHT - PADDLE_HEIGHT:
            right_paddle_y += PADDLE_SPEED
    else:
        if keys[pygame.K_UP] and right_paddle_y > 0:
            right_paddle_y -= PADDLE_SPEED
        if keys[pygame.K_DOWN] and right_paddle_y < HEIGHT - PADDLE_HEIGHT:
            right_paddle_y += PADDLE_SPEED

    # Ball movement
    ball_x += ball_dx
    ball_y += ball_dy

    # Reverse gravity at center line
    if WIDTH // 2 - 5 < ball_x < WIDTH // 2 + 5 and not g_center_crossed:
        g_angle = (g_angle + 180) % 360
        g_center_crossed = True

    # Reset gravity change after paddle hit
    if ball_x - BALL_RADIUS <= 20 and left_paddle_y < ball_y < left_paddle_y + PADDLE_HEIGHT:
        ball_dx *= -1
        ball_dy += random.uniform(-1, 1)  # Add a bit of randomness to the bounce
        g_center_crossed = False
    elif ball_x + BALL_RADIUS >= WIDTH - 20 and right_paddle_y < ball_y < right_paddle_y + PADDLE_HEIGHT:
        ball_dx *= -1
        ball_dy += random.uniform(-1, 1)
        g_center_crossed = False

    # Gravity effect
    ball_dx += G_FORCE * math.cos(math.radians(g_angle))
    ball_dy += G_FORCE * math.sin(math.radians(g_angle))

    # Ball collision with top and bottom walls
    if ball_y - BALL_RADIUS <= 0 or ball_y + BALL_RADIUS >= HEIGHT:
        ball_dy *= -1

    # Ball out of bounds
    if ball_x < 0:
        right_score += 1
        ball_x, ball_y = WIDTH // 2, HEIGHT // 2
        ball_dx, ball_dy = BALL_SPEED * random.choice([-1, 1]), BALL_SPEED * random.choice([-1, 1])
        g_angle = random.randint(0, 360)  # Change gravity direction on reset
        game_start_time = pygame.time.get_ticks()
        solar_flare_triggered = False
        g_center_crossed = False
    elif ball_x > WIDTH:
        left_score += 1
        ball_x, ball_y = WIDTH // 2, HEIGHT // 2
        ball_dx, ball_dy = BALL_SPEED * random.choice([-1, 1]), BALL_SPEED * random.choice([-1, 1])
        g_angle = random.randint(0, 360)  # Change gravity direction on reset
        game_start_time = pygame.time.get_ticks()
        solar_flare_triggered = False
        g_center_crossed = False

    # Check for solar flare
    elapsed_time = pygame.time.get_ticks() - game_start_time
    if elapsed_time > SOLAR_FLARE_TIME and not solar_flare_triggered:
        solar_flare_triggered = True
        flare_message_time = pygame.time.get_ticks()
        g_angle = random.randint(0, 360)

    draw_objects()
    clock.tick(60)

pygame.quit()
